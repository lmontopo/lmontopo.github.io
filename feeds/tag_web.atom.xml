<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The L Blog</title><link href="http://lmontopo.github.io/" rel="alternate"></link><link href="http://lmontopo.github.io/feeds/tag_web.atom.xml" rel="self"></link><id>http://lmontopo.github.io/</id><updated>2014-11-27T05:00:00-05:00</updated><entry><title>I made my first cookie!</title><link href="http://lmontopo.github.io/i-made-my-first-cookie.html" rel="alternate"></link><updated>2014-11-27T05:00:00-05:00</updated><author><name>Leta Montopoli</name></author><id>tag:lmontopo.github.io,2014-11-27:i-made-my-first-cookie.html</id><summary type="html">&lt;p&gt;Margo and I have been working on our web-framework, Chapeau. To test out
its functionality and user-friendliness, we've been using Chapeau to
build various web-apps. This week we implimented a buzz-feed-style quiz.
To challenge ourselves (and Chapeau) we structured the app to have a
separate webpage for each question, and then a final webpage displaying
the result. This forced us to address the issues: 'Does Chapeau allow
data to be transfered between non-adjacent webpages?' and 'Does Chapeau
allow for the data to be accessed directly and used in a calculation'?
As we tried to answer these questions and broaden the functionality of
Chapeau, the framework took on several variations. In this blog post
I'll begin by describing how Chapeau works for very simple web-apps, and
then I'll continue by explaining some of the changes we made to Chapeau
as we worked towards our buzz-feed-style quiz.&lt;/p&gt;
&lt;h4&gt;Simple Web Apps&lt;/h4&gt;
&lt;p&gt;Chapeau's design makes very simple web-apps just that: very simple. To
make such an app, a developer needs only to define a dicitonary matching
URL's to their corresponding html pages. Then calling Chapeau's 'go'
function on the dictionary gets everything going. Pretty simple right?
Beleive it or not, with Chapeau, an app this simple can even pass
variables from an html form to the webpage that follows. The app itself
(by 'app' I mean the python code) does not need to be changed to include
this feature. Adding very basic variable passing to a Chapeau app is
just a matter of formatting your html pages accordingly. Here's how to
do it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The form must specify either 'method = get' or 'method = post',
    since Chapeau deals only with post and get requests.&lt;/li&gt;
&lt;li&gt;The form's action needs to specify the URL that this form redirects
    to.&lt;/li&gt;
&lt;li&gt;The html page corresponding to this URL should have '%(key)s'
    wherever this key's value is meant to appear.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How is this all working? In the background Chapeau parses the request
made from the form's submission. Chapeau finds the user's input in this
request and stores it in a dictionary of key-value pairs called params.
The specified html file is then read in as a string with '%params'
tacked on to the end. Python's built in string formatting takes care of
the rest, and the page renders with the desired arguments! Easy-peasy.&lt;/p&gt;
&lt;p&gt;But what if we wanted to mutate the user input in some way? Or what if
we wanted to &lt;em&gt;use&lt;/em&gt; the input to perform some sort of analysis or
calculation? Perhaps we want to create some results for a quiz? Our
initial version of Chapeau could not handle such situations.&lt;/p&gt;
&lt;h4&gt;Adding Functions&lt;/h4&gt;
&lt;p&gt;To extend Chapeau's usability Margo and I decided that web developers
would have the choice to route a URL to a path or to a function. If a
URL is routed to a function then this function would have a few
structural constraints. Initially, these were the constraints we
implimented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chapeau will be passing a dictionary into the function, so the
    function must be defined to accept it. This dictionary will contain
    some of the request information and will look something like:
    '{'type': 'get', 'query': 'query_string', 'path': 'url' , 'body':
    'user_input_from_post_form'}'. (Basically this dictionary stores
    all of the request information except for the headers.)&lt;/li&gt;
&lt;li&gt;The function must return two objects: a path and a dictionary. The
    path will specify the next html page to be rendered and the
    dictionary will be the same one that the function receives, but
    possibly with some mutated data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The dictionary that the function takes in gives the developer access to
the user input that was just aquired. If the developer wanted to mutate
this user input in anyway, they could do so. Alternatively, if the
developper wants user input to be saved so that it can be obtained
later, Margo and I figured this could be done as well. The developper
could create a global dictionary that they can add to when user input is
submitted, and that they could read from later. Problem solved. Except
not really.&lt;/p&gt;
&lt;p&gt;More experienced developpers might already see the problem we've
created. Consider the buzz-feed-style quiz that Margo and I wanted to
create. Suppose that we implimented this app by storing the user input
in a global dictionary. This dictionary is updated after every question
is answered. When the results page needs to be rendered all of the user
input is obtained from the global dictionary. But suppose two clients,
client1 and client2, are taking the quiz simultaneously. Client1 inputs
their answer to question 1 first, and chooses 'grapes'. Before client1
finishes the quiz client2 submits their answer to question 1 as
'oranges'. When our app goes to fetch the results of client1, their
'grapes' answer will have been overwritten by 'oranges'. Afterall, we've
only implimented one global dictionary for our entire client base. Oups.&lt;/p&gt;
&lt;h4&gt;Finally, adding Cookies!&lt;/h4&gt;
&lt;p&gt;At this point Margo and I weren't really sure how to solve this issue.
How do we keep track of which answer corresponds to which client? For
advice, we turned to our trusted friend
&lt;a href="http://www.greghendershott.com"&gt;Greg&lt;/a&gt; who suggested we use cookies!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is a cookie, and how do I make one?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A cookie is a very small peice of data that will be sent from a server
and stored temporarily on a client's computer. To create a cookie, the
server needs to include a 'Set-Cookie' header in their HTTP response to
the client. This will prompt the client's browser to create a 'cookie'
to store the specified data. When a browser has a cookie from our server
any HTTP request it sends to us will include a 'Cookie' header
containing the data we asked it to store.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How does this help our situation?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Margo and I used cookies to store every quiz answer submited from a
client. Then, when the client's browser sends our server an HTTP request
asking for their results page, this request will include all of that
client's quiz answers - stored in the form of cookies! Great!&lt;/p&gt;
&lt;p&gt;Now lets talk about how we implimented this. To create cookies Margo and
I changed the constraints of our functions (the ones that URL's are
routed to) as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chapeau will now pass to these functions both the dictionary
    containing the request information and a client object. So these
    functions must now accept two parameters! The dicitonary accepted
    contains everything the previous one does, but also includes
    '{header: {all of the headers and their values}}'.&lt;/li&gt;
&lt;li&gt;The functions must call Chapeau's render function: render(client,
    path/to/html/file, args, header) before returning None.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that &lt;em&gt;all&lt;/em&gt; of the request information is passed to the developper,
cookies can be read. Since the developer is now also in charge of
calling the render function, they have control over any headers they
want to include in their response. The header parameter in the render
function is optional, and when unspecified it will be set to None. The
args parameter is a dictionary of variables that we want to pass to the
html file. So, in our buzz-feed-style-quiz, every client's answer will
be saved in a cookie. When we want to render the results page all of the
incoming cookies can be read from the inputed dictionary of request
information. We can create another dictionary out of the received
cookies and can pass this dictionary into our render function to be
passed to our html file. Yay!&lt;/p&gt;
&lt;p&gt;Thanks Margo for working on this project with me, its been an adventure!&lt;/p&gt;</summary><category term="Web"></category></entry><entry><title>Little Lessons 3: URI's, 'urllib', Template engines, and generators.</title><link href="http://lmontopo.github.io/little-lessons-3-uris-urllib-template-engines-and-generators.html" rel="alternate"></link><updated>2014-11-19T05:00:00-05:00</updated><author><name>Leta Montopoli</name></author><id>tag:lmontopo.github.io,2014-11-19:little-lessons-3-uris-urllib-template-engines-and-generators.html</id><summary type="html">&lt;p&gt;I've learned so many fun little lessons over the past week, its time for
another post!&lt;/p&gt;
&lt;h4&gt;What is a URI? Is it the same as a URL?&lt;/h4&gt;
&lt;p&gt;URI stands for uniform resource identifier. A very common form of a URI
is the URL, which stands for uniform resource locator. The URL is just
the address of a website - ie. the thing you type into your browser when
you want to visit a webpage. Apparently, sometimes, the terms URI and
URL are used interchangeably. But, if you want to be precise, know that
a URL is a type of URI. Time to dig a little deaper into URL's...&lt;/p&gt;
&lt;h4&gt;What meant by the 'path' and the 'query' of a URL?&lt;/h4&gt;
&lt;p&gt;The wikipedia page,
&lt;a href="http://en.wikipedia.org/wiki/Uniform_resource_locator"&gt;here&lt;/a&gt;, does a
good job at explaining the URL. I'll summarize what I learned from it
here. The URL consists of several different parts. I'll introduce these
parts and discuss them with respect to this example:
http://www.cineplex.com/Search?Query=Interstellar&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The very first part of the URL is the &lt;strong&gt;protocol&lt;/strong&gt;. It specifies
    which application protocol is being used to obtain the resource. In
    our example the application protocol is 'http'.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;domain name&lt;/strong&gt; can be an IP address or a registered and easier
    to remember name associated to an IP address. In our example the
    domain name is 'cineplex.com'. If you are creating a server on your
    own computer, your domain name might be 'localhost'.&lt;/li&gt;
&lt;li&gt;After the domain name a &lt;strong&gt;port number&lt;/strong&gt; can optionally be specified.
    By default we are directed to port 8000, and so it is almost always
    unnecessary to manually specify a port.&lt;/li&gt;
&lt;li&gt;A single domain name or IP address can host a multitude of files.
    The particular file/resource that a URL is after is specified by the
    &lt;strong&gt;URL path&lt;/strong&gt;. It specifies the address of the particular file we are
    requesting and is analogous to the way in which we specify the path
    to a particular file within our own computer. In our example the URL
    path is '/Search'.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;query string&lt;/strong&gt; contains data (usually inputed by the user)
    which will be passed to some sort of software running on the server.
    The example I've shown is the result of typing "Interstellar" into
    the search bar on the cineplex homepage. "Interstellar" was passed
    to the servers computer and used in some program to figure out the
    output. Then the results were passed back to me in the webpage with
    URL "http://www.cineplex.com/Search?Query=Interstellar". The query
    string part of the URL is '?Query=Interstellar'. As far as I know,
    the query string always starts with a question mark.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;urllib.uncode('string') is great! Here's why:&lt;/h4&gt;
&lt;p&gt;As I may have previously mentioned, I have decided to write my own web
framework. Not because I think I can do a better job than the existing
frameworks, but because I want to learn more about what is happening
behind the scenes with web development. An issue I encountered as I
developped my framework involved html forms and processing user input.
If a user inputed any special characters, like '!', '\~', '?', etc., my
browser would encode these characters and send my server an http request
with these encodings. For example, '!' was encoded as '%21'. Why is the
browser doing this? Although its tempting to think that this character
encoding is just a pain in the butt, its actually pretty useful! Indeed,
some characters in the URL have a special meaning. The question mark,
for example, is always used to signify the begining of a query. So
whenever the &lt;em&gt;USER&lt;/em&gt; inputs characters which have (or may have) a special
meaning, the browser will encode these characters to avoid confusion.
The places where these characters are used by the browser to indicate a
special meaning, they are NOT encoded. So, to make this clear, when a
user inputs "?" into a form, it will be encoded. But if a query string
is present, the "?" at the begining of the query will not be encoded.
And this makes my life alot easier when I have to parse through the raw
http requests. I can guarantee that whenever I see a "?" it is
signifying the begining of a query string, and NOT some user input.
Great! But now, I DO have to worry about decoding the encoded characters
so that they can correctly be passed as a variable to an html page. How
do I decode a special character from its encoded represenation? Using
the python's urllib module!! Check it out:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;!!!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%21%&lt;/span&gt;&lt;span class="s"&gt;21%21&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;encoded_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;amp;!?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;encoded_input&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;F&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;decoded_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;encoded_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;decoded_input&lt;/span&gt;
&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="err"&gt;!?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;What is a template engine?&lt;/h4&gt;
&lt;p&gt;A template engine provides a way for users to put variables and possibly
even logic into their html templates. Templating engines consist of a
templating language and a templating compiler. The templating language
specifies syntax that will be understood to mean specific things in your
html template. So, for example, you could say that two curly braces will
enclose any variables and that a curly brace and a percent sign will
enclose any python logic. Then, you're compiler will parse this html
template and then will see which parts need to perform logic or input
variables, and will ultimately translate the template into an html page
void of any logic or variables, that can be displayed by your browser.
Often, template engines are part of what makes up a web framework.&lt;/p&gt;
&lt;h4&gt;Generators are a kind of python object!&lt;/h4&gt;
&lt;p&gt;You know how you can write lists like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This way of specifying a list is called a &lt;strong&gt;list comprehension&lt;/strong&gt;. I just
found out yesterday that if we write the same thing but instead use the
non-square embraces, then we create something called a generator. Check
it out:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;abcdefg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;genexpr&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x10b323910&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Woah! So whats a generator? I honestly don't know. Yet. All I know is
that its a different kind of python object, one which I had previously
no idea about. By typing in `dir((x for x in 'abcdef')) we can see the
collection of methods that generators have, and it is, obviously, a
different collection than the methods associated with lists. I hope to
come back to generators in the future to explain why they are used and
what they are good for!&lt;/p&gt;
&lt;h4&gt;Hexadecimal Numbers in Python&lt;/h4&gt;
&lt;p&gt;Have you ever seen numbers starting with 0x in python, and not really
known what they were for? I have seen these around, and always just
thought they were some sort of complicated encoding. In reality, numbers
begining with 0x are just hexidecimal numbers - ie. numbers with base 16
instead of 10. (If you aren't familiar with hexidecimal numbers, no
worries. You can read up on it
&lt;a href="http://simple.wikipedia.org/wiki/Hexadecimal_numeral_system"&gt;here&lt;/a&gt;.) So
we can write:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mh"&gt;0x11&lt;/span&gt;
&lt;span class="mi"&gt;17&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;since 11 is the base 16 representation of the decimal number 17. Mystery
solved.&lt;/p&gt;</summary><category term="Web"></category></entry><entry><title>Adventures with sockets, threads and more!</title><link href="http://lmontopo.github.io/adventures-with-sockets-threads-and-more.html" rel="alternate"></link><updated>2014-11-11T00:00:00-05:00</updated><author><name>Leta Montopoli</name></author><id>tag:lmontopo.github.io,2014-11-11:adventures-with-sockets-threads-and-more.html</id><summary type="html">&lt;p&gt;For a while now I've wanted to learn more about the internet, about
servers, and about how web apps &lt;em&gt;really&lt;/em&gt; work. Last week I finished a
small flaks tutorial. I enjoyed the tutorial and I learned some cool
things by doing it, yet, I was feeling unsatisfied. The tutorial just
didn't hit the spot for me. I wasn't really sure what I was after, but I
knew it was something deeper. Yesterday I discovered sockets, and it was
dead on!&lt;/p&gt;
&lt;p&gt;This blog post is going to be a (not so) little write up of some things
I've learned as I digging around in the world of sockets and other
networky type things. I'll start with a few questions I was thinking
about yesterday. I'll provide what I think are some decent and mostly
true answers to these questions. (Of course, if you find something in
this post that is just outright wrong, please do reach out to correct
me!). Then I'll introduce some code Susan and I wrote to make a simple
web chat service using sockets. Finally, a second round of questions and
answers will be presented. Enjoy!&lt;/p&gt;
&lt;h4&gt;QUESTIONS ROUND 1&lt;/h4&gt;
&lt;h5&gt;What's a socket?&lt;/h5&gt;
&lt;p&gt;This is a question I've spent a great deal of time trying to answer.
Here's the answer I've settled on: A socket is some sort of abstract
object like that of a "file" on your computer. We could say that the
object type "socket" is built into the operating system of our computer
and allows users (or programs) to create instances of them at will.
Sockets are used as the endpoints of any bidirectional communication
channel. The socket contains the FROM IP address, the TO IP address, the
FROM port number, and the TO port
number.&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; We can think about the function of sockets to be like plugging chords
into walls on the two ends of your communcation channel.&lt;/p&gt;
&lt;h5&gt;How does my computer communicate with my router?&lt;/h5&gt;
&lt;p&gt;The short answer: via radio signals. Modern computers come with a built
in wireless adapter which translates data from your computer into radio
waves. These radio waves can then be sent out into the world and picked
up by a router. Communication can occur in the other direction as well:
The router can send radio waves to a comptuer and the computer will
translate those waves into 0s and 1s so that it can understand the
message. One thing that I found interesting is that my computer is
always listening to the router. Sometimes my computer will hear messages
that aren't even addressed to it, in which case it won't accept these
messages. So there's a difference between "listening" and "accepting"
messages from the router. We'll come back to this!&lt;/p&gt;
&lt;h5&gt;Can older computers connect to the internet?&lt;/h5&gt;
&lt;p&gt;It depends. If your computer has the necessary internet handling
software but is simply lacking a translater, then yes. The modem,
afterall, is simply a translator. It takes signals (probably passed to
it through your phone line) and transforms these messages into 0s and 1s
that your computer can understand. But, this only makes your computer
internet ready if you're operating system can create sockets, and can
understand and work with internet protocols. Otherwise, extra software
would have to be implimented and I'm not exactly sure if this can always
be done.&lt;/p&gt;
&lt;h5&gt;SOME CODE&lt;/h5&gt;
&lt;p&gt;To learn more about sockets Susan and I implimented a chat service
between our two computers using sockets. I wrote the code for the
"server", and she wrote the code for the "client". If I ran 'server' on
my computer and then she ran 'client' on hers, we were able to chat back
and forth in our terminals! Anything I wrote in my terminal would be
sent to hers the moment I pressed enter. Likewise, messages she typed in
her terminal would be sent to mine when she pressed enter. It was like a
real world chat service! Here's our code:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;###SERVER (On Leta&amp;#39;s Computer)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;

&lt;span class="n"&gt;serversocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;#host = socket.gethostname()&lt;/span&gt;

&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;

&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10.0.7.65&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# queue up to 5 requests:&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;clientsocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clientsocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;friend says&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;clientsocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;HTTP/1.0 200 OK&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;clientsocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;clientsocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clientsocket&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;clientsocket&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#CLIENT (on Susan&amp;#39;s computer)import socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;server&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;SOCKET_LIST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;RECV_BUFFER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;
    &lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;

    &lt;span class="n"&gt;server_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;10.0.7.65&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;connecting to &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; port &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;server_addr&lt;/span&gt;
    &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server_addr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hi!!!! TESTING!!&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RECV_BUFFER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Leta says: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;closing socket&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;QUESTIONS ROUND 2&lt;/h4&gt;
&lt;h5&gt;What is happening when I write "socket.listen"?&lt;/h5&gt;
&lt;p&gt;As mentioned earlier, your computer is constantly "listening" to
messages from your router. But its not necessarily ACCEPTING them.
Calling socket.listen() tells your computer to actively start accepting
messages that are addressed to the socket. So, as soon as my computer
sees some message addressed to a socket which has been told to listen,
the socket will send back a message saying something like, "OK, I am
willing to receive your message". And then the message will be sent and
received. (At least I think thats kind of how it goes.)&lt;/p&gt;
&lt;h5&gt;What is TCP? What is IP? Are they related?&lt;/h5&gt;
&lt;p&gt;TCP stands for Transmission Control Protocoll. IP stands for Internet
Protocol. Both are "protcols" in the sense that they outline the
standards by which machines are supposed to communicate with each other.
To see how they differ, lets walk through how Susan's and my computer
are dealing with our 'chat server'. Suppose I send the message "hello"
to Susan. When I send this message to Susan the string "hello" will be
wrappred with extra data necessary to satisfy TCP. Once this mesage
satisfies TCP it can be sent to my operating system, which will look at
it, realize that data needs to be sent out in the world, and will
package the data with yet another layer so it adheres to IP. This
message is then translated to radio waves to be sent to the router. Upon
receiving my message the router will pass the package to Susan's
computer. When Susan's computer receives the package it translates the
data back into 0s and 1s and then begins unpacking it. Her operating
system will take off the outtermost layer of packaging: that associated
with IP. Her computer will find that the contents of this package adhere
to TCP. Susan's computer will make sure that TCP is followed. Since TCP
is a protocol which ensures that messages are sent in order, this means
that within the TCP packaging Susan's computer might find some data that
says "Hey! I'm packet number 13 sent from Leta's computer to yours. Have
you gotten package 1 through 12 already? You can't open me up until
you've received all the ones that come before." And her computer will
respond saying something like "Yes, I have gotten all the messages that
come before, so I can now open you up". Susan's computer will then pass
the package to the application (the chat service) which will unpack the
data to find the message I sent: "hello".&lt;/p&gt;
&lt;p&gt;I know this is pretty confusing. I'm still wrestling with these concepts
myself. Lets recap: On the senders side, the package gets wrapped with
all sorts of layers and then this package gets passed around, and on the
receivers side, the package gets unpacked layer by layer. Each layer is
associated with another protocol. Underneath the IP packaging, data can
be sent adhering to TCP or adhering to other protocols. Indeed, TCP is
not the only one. As I mentioned above, TCP is a protocol that ensures
that data is sent in a particular order, and it ensures that a response
be sent back to the sender to communicate if/when the data was received.
Another protocol is UDP: User Datagram Protocol. It does not ensure that
delivery has occured and does not ensure that messages are delivered in
order. We're not going to get into why UDP might be used over TCP, but
the point I wanted to make was that IP can encapsulate many different
types of messages. TCP is just the one that happened to be used in the
chat server Susan and I implimented.&lt;/p&gt;
&lt;h5&gt;What is a thread?&lt;/h5&gt;
&lt;p&gt;Have you ever heard the term "multi-threaded programming" and wondered
what the heck people were talking about? If so, read on! Consider a chat
server where I could type a message to Susan, and then I couldn't type
one again until I had her response. That would kind of suck, wouldn't
it? So what this means is that in a good chat service, my server can be
waiting for me (the user) to input a message, and can simultaneously be
listening for any incoming messages from Susan. The key here is that we
want our program to be doing &lt;strong&gt;two things simultaneously&lt;/strong&gt;. Looking at
the code for Server, above, we see that what I want is for the function
"write" and the function "listen" to be running concurrently. And the
way I implemented this was through threads. Each thread refers to a
different task that we want to be carried out, and threading is the
process of running them simultaneously. Conclusion: Threading rocks!&lt;/p&gt;
&lt;h5&gt;Are sockets being used when I use my browser to visit a webpage?&lt;/h5&gt;
&lt;p&gt;YES! Often multiple sockets are used to transfer the information of one
a single webpage to your computer. Generally speaking, each HTTP request
has its own socket that it connects with. This socket will close as soon
as the request has been made and received. Some web pages have 100s of
GET or POST (or other) HTTP requests. This means that 100s of sockets
will be created, opened, and closed on my computer in the short time it
takes to load the webpage in my browser. I have been told that this is
actually starting to change. I don't know very mucha about this, but I
think HTTP is starting to allow a single socket to handle more than one
HTTP requests.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;A Port is just this idea that we've implimented on our computers so
that we can have several things going on on one computer. Its kind
of like apartments on an apartment building. If we have to have
several separate things going on at different addresses within the
same machine, ports is the way we've done
that. &amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="Web"></category><category term="Threading"></category></entry></feed>